<?php

/**
 * User
 *
 * This class has been auto-generated by the Doctrine ORM Framework
 *
 * @package    FansubCMS
 * @subpackage Models
 * @author     FansubCMS Developer <##EMAIL##>
 * @version    SVN: $Id: Builder.php 7200 2010-02-21 09:37:37Z beberlei $
 */
class User extends BaseModelUser {
    /**
     * sets the users password to its SHA256 hash
     * @param string $pass
     */
    public function setPassword($pass) {
        $this->_set('password',hash('sha256',$pass));
    }


    /**
     * This method returns an array of the team
     * @param integer $project id of a project | bool false for site team
     * @return Array $team | bool false on fail
     */
    public static function getTeam($project=false) {
        if($project !== false) {
            $team = false; // not yet implemented
        } else {
            $q = Doctrine_Query::create();
            $q->from('User u')
                    ->where('u.show_team = ?','yes')
                    ->orderBy('u.name ASC');
            $users = $q->fetchArray();
            //$users = $q->execute();
            foreach($users as $user) {
                $q = Doctrine_Query::create();
                $q->select('t.name')
                        ->from('Task t')
                        ->leftJoin('t.UserTask ut')
                        ->where('ut.user_id = ?',$user['id']);
                $task = $q->fetchArray();
                $user['tasks'] = $task;
                $team[] = $user;
            }
        }
        return $team;
    }

    /**
     * logs the user in, returns Zend_Auth_Result
     * @author Hikaru-Shindo <hikaru@animeownage.de>
     * @param string $username
     * @param string $password
     * @return Zend_Auth_Result
     */
    public static function login($username,$password) {
        // Get our authentication adapter and check credentials
        $adapter = new FansubCMS_Auth_Adapter($username,$password);
        $auth    = Zend_Auth::getInstance();
        $result  = $auth->authenticate($adapter);
        return $result;
    }

    /**
     * logs the user out
     * @author Hikaru-Shindo <hikaru@animeownage.de>
     * @return void
     */
    public static function logout() {
        Zend_Auth::getInstance()->clearIdentity();
    }

    /**
     * This method returns true if the user is logged in an false if not
     * @author Hikaru-Shindo <hikaru@animeownage.de>
     * @return bool
     */
    public static function isLoggedIn() {
        return Zend_Auth::getInstance()->hasIdentity();
    }

    public function getRoles() {
        $ret = array();
        foreach($this->UserRole as $role) {
            $ret[] = $role->role_name;
        }
        return $ret;
    }

    public function getTasks() {
        $ret = array();
        foreach($this->UserTask as $task) {
            $ret[] = $task->Task->id;
        }
        return $ret;
    }

    public function updateProfile(array $values) {
        $this->name = $values['username'];
        if(!empty($values['password1'])) {
            $this->password = $values['password1'];
        }
        $this->description = $values['description'];
        $this->email = $values['email'];
        $this->active = $values['active'];
        $this->activated = $values['activated'];
        $this->show_team = $values['show_team'];
        # save
        $this->save();
        # add roles
        if(is_array($values['roles'])) {
            foreach($this->UserRole as $role) {
                $role->delete();
            }
            foreach($values['roles'] as $role) {
                $r = new UserRole;
                $r->user_id = $this->id;
                $r->role_name = $role;
                $r->save();
            }
        }
        if(is_array($values['tasks'])) {
            $unlink = array();
            foreach($this->UserTask as $task) {
                $task->delete();
            }
            foreach($values['tasks'] as $task) {
                $ut = new UserTask;
                $ut->task_id = $task;
                $ut->user_id = $this->id;
                $ut->save();
            }
        }
    }

    public function hasRole($name) {
        $roles = $this->getRoles();
        return in_array($name, $roles);
    }

}