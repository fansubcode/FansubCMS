<?php
/**
 * This class has been auto-generated by the Doctrine ORM Framework
 */
class Version14 extends Doctrine_Migration_Base
{
    public function preUp()
    {
        parent::preUp();
        
        // get a mapping of current ids for later use
        $conn = Doctrine_Manager::getInstance()->connection();
        $episodes = $conn->execute('SELECT * FROM project_episodes')->fetchAll();
        
        $mapping = array();
        $afterDelete = array();
        foreach($episodes as $episode) {
            if(empty($mapping[$episode['project_id'] . '-' .$episode['number'] . '-' . $episode['version']])) {
                $mapping[$episode['project_id'] . '-' . $episode['number'] . '-' . $episode['version']] = $episode['id'];
            } else {
                $afterDelete[] = $episode['id'];
            }
        }
        
        foreach($episodes as $episode) {
            
            $rel = new Projects_Model_EpisodeRelease();

            $rel->vcodec = $episode['vcodec'];
            $rel->acodec = $episode['acodec'];
            $rel->container = $episode['container'];
            $rel->crc = $episode['crc'];
            $rel->released_at = $episode['released_at'];
            $rel->updated_by = $episode['updated_by'];
            $rel->created_at = $episode['created_at'];
            $rel->updated_at = $episode['updated_at'];
            $rel->episode_id = $mapping[$episode['project_id'] . '-' .$episode['number'] . '-' . $episode['version']];

            $rel->save();
            
            $rel->free();
        }
        
        Doctrine_Query::create()->delete('Projects_Model_Episode')->whereIn('id', $afterDelete)->execute();
    }
    
    public function up()
    {
        $this->removeColumn('project_chapters', 'format');
        $this->removeColumn('project_chapters', 'resolution');
        $this->removeColumn('project_chapters', 'title');
        $this->removeColumn('project_chapters', 'updated_by');
        $this->removeColumn('project_chapters', 'released_at');
        $this->removeColumn('project_episodes', 'vcodec');
        $this->removeColumn('project_episodes', 'acodec');
        $this->removeColumn('project_episodes', 'container');
        $this->removeColumn('project_episodes', 'crc');
        $this->removeColumn('project_episodes', 'updated_by');
        $this->removeColumn('project_episodes', 'released_at');
    }

    public function down()
    {
        $this->addColumn('project_chapters', 'version', 'integer', '2', array(
             ));
        $this->addColumn('project_chapters', 'format', 'string', '10', array(
             ));
        $this->addColumn('project_chapters', 'resolution', 'string', '10', array(
             ));
        $this->addColumn('project_chapters', 'title', 'string', '255', array(
             ));
        $this->addColumn('project_chapters', 'updated_by', 'string', '32', array(
             ));
        $this->addColumn('project_chapters', 'released_at', 'timestamp', '25', array(
             ));
        $this->addColumn('project_episodes', 'version', 'integer', '2', array(
             ));
        $this->addColumn('project_episodes', 'vcodec', 'string', '10', array(
             ));
        $this->addColumn('project_episodes', 'acodec', 'string', '10', array(
             ));
        $this->addColumn('project_episodes', 'container', 'string', '10', array(
             ));
        $this->addColumn('project_episodes', 'crc', 'string', '8', array(
             ));
        $this->addColumn('project_episodes', 'updated_by', 'string', '32', array(
             ));
        $this->addColumn('project_episodes', 'released_at', 'timestamp', '25', array(
             ));
    }
}